/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import Model.linkedlist.singly.LinkedList;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import model.Marca;
import model.Tren;
import shared.jsonAdapter.JsonAdapter;

/**
 *
 * @author Charly Cimino
 */
public class Trenes extends javax.swing.JFrame {

    DefaultTableModel modelo;
    private LinkedList<Tren> listaTrenes;
    private final String pathFile = "C:\\Users\\tostiarepa64\\Downloads\\proyecto_estructuras\\Centralizado\\src\\main\\java\\baseDatos\\trenes.json";

    
    

    /**
     * Creates new form Trenes
     */
    public Trenes() {
        initComponents();
         listaTrenes = new LinkedList<>();
        modelo = new DefaultTableModel();
        modelo.addColumn("Nombre");
        modelo.addColumn("ID");
        modelo.addColumn("Capacidad");
        modelo.addColumn("Marca");
        modelo.addColumn("Kilometraje");
        modelo.addColumn("Disponibilidad");
        this.Tabla.setModel(modelo);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tabla = new javax.swing.JTable();
        BtnAgregar = new javax.swing.JButton();
        BtnBajar = new javax.swing.JButton();
        txtMarca = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        txtVagones = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Nombre:");

        txtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreActionPerformed(evt);
            }
        });

        jLabel3.setText("Marca:");

        Tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6"
            }
        ));
        jScrollPane1.setViewportView(Tabla);

        BtnAgregar.setText("Agregar");
        BtnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAgregarActionPerformed(evt);
            }
        });

        BtnBajar.setText("Bajar");
        BtnBajar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnBajarActionPerformed(evt);
            }
        });

        txtMarca.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mercedez-Benz", "Arnold" }));
        txtMarca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMarcaActionPerformed(evt);
            }
        });

        jLabel4.setText("Vagones");

        txtVagones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtVagonesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtMarca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BtnAgregar)
                        .addGap(18, 18, 18)
                        .addComponent(BtnBajar))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtVagones, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtMarca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtVagones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BtnAgregar)
                            .addComponent(BtnBajar))))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAgregarActionPerformed
     String nombre = txtNombre.getText();   
    String capacidadStr = txtVagones.getText();



    // Obtener la marca seleccionada del JComboBox
    String marcaStr = (String) txtMarca.getSelectedItem();
    Marca marca;

    // Convertir la cadena de marca a un objeto Marca
    if (marcaStr.equals("Mercedez-Benz")) {
        marca = Marca.MERCEDES_BENZ;
    } else if (marcaStr.equals("Arnold")) {
        marca = Marca.ARNOLD;
    } else {
        return;
    }

    // Verificar que la capacidad ingresada sea un número válido
   int capacidad;
    capacidad = Integer.parseInt(capacidadStr);

    // Validar la capacidad según el tipo de tren
    if (marca == Marca.MERCEDES_BENZ && (capacidad < 1 || capacidad > 28)) {
        JOptionPane.showMessageDialog(this, "La capacidad para un tren Mercedes-Benz debe estar entre 1 y 28 vagones", "Error", JOptionPane.ERROR_MESSAGE);
        return; // Salir del método si la capacidad no cumple con los requisitos
    } 
    if (marca == Marca.ARNOLD && (capacidad < 1 || capacidad > 32)) {
    JOptionPane.showMessageDialog(this, "La capacidad para un tren Arnold debe estar entre 1 y 32 vagones", "Error", JOptionPane.ERROR_MESSAGE);
    return; // Salir del método si la capacidad no cumple con los requisitos
}

    // Crear un nuevo objeto Tren con los datos obtenidos
    Tren nuevoTren = new Tren(nombre, marca, capacidad);

    // Agregar el tren a la lista enlazada
    listaTrenes.add(nuevoTren);
    
    actualizarTabla();

    // Limpiar los campos después de agregar el tren
    limpiarCampos();
   
  // Crear un Gson para convertir objetos a JSON
    Gson gson = new GsonBuilder().setPrettyPrinting().create();

    // Convertir la lista de Trenes a un JsonArray de objetos Json
    JsonArray trenesJsonArray = new JsonArray();
    for (int i = 0; i < listaTrenes.size(); i++){
           Tren tren = listaTrenes.get(i);
        JsonObject trenJsonObject = new JsonObject();
        trenJsonObject.addProperty("nombreTren", tren.getNombreTren());
        trenJsonObject.addProperty("ID", tren.getIdTren());
        trenJsonObject.addProperty("capacidadCarga", tren.getCapacidadCarga());
        trenJsonObject.addProperty("marca", marcaStr);
        trenJsonObject.addProperty("kilometraje", tren.getKilometraje());
        trenJsonObject.addProperty("disponibilidad", tren.estaDisponible());
        trenesJsonArray.add(trenJsonObject);
    }

    // Convertir el JsonArray a una cadena JSON formateada
    String jsonString = gson.toJson(trenesJsonArray);

    // Guardar la cadena JSON en el archivo
    try (BufferedWriter writer = new BufferedWriter(new FileWriter("C:\\Users\\tostiarepa64\\Downloads\\proyecto_estructuras\\Centralizado\\src\\main\\java\\baseDatos\\trenes.json"))) {
        writer.write(jsonString);
        JOptionPane.showMessageDialog(this, "Datos guardados exitosamente", "Guardado", JOptionPane.INFORMATION_MESSAGE);
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al guardar los datos", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_BtnAgregarActionPerformed

    
    
    private void actualizarTabla() {
    // Limpiar el modelo de la tabla
    modelo.setRowCount(0);

    // Obtener el tamaño de la lista de trenes
    int size = listaTrenes.size();

    // Agregar los datos de los trenes al modelo de la tabla
    for (int i = 0; i < size; i++) {
        Tren tren = listaTrenes.get(i);
        
                String marcaSeleccionada = (String) txtMarca.getSelectedItem(); // Suponiendo que el JComboBox contiene strings de marcas

        // Agregar fila a la tabla con los datos del tren
        Object[] fila = {
            tren.getNombreTren(),
            tren.getIdTren(),
            tren.getCapacidadCarga(),
            marcaSeleccionada,
            tren.getKilometraje(),
            tren.estaDisponible()
        };
        modelo.addRow(fila);

    }
}

private String calcularDisponibilidad(Tren tren) {
    // Aquí debes implementar la lógica para determinar la disponibilidad
    // Por ejemplo, podrías tener un campo en la clase Tren que indique si está disponible o no
    // Y aquí puedes verificar ese campo y devolver "Disponible" o "No Disponible"
    // Ejemplo:
    if (tren.estaDisponible()) {
        return "Disponible";
    } else {
        return "No Disponible";
    }
}

 
     private void limpiarCampos() {
        // Limpiar los campos de entrada después de agregar un tren
        txtNombre.setText("");
        txtVagones.setText("");
    }

    
    private void BtnBajarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnBajarActionPerformed
       // Obtener el índice seleccionado en la tabla
         int fila = Tabla.getRowCount();
        for (int i = fila - 1; i >= 0; i--) {
            modelo.removeRow(i);
        }
    }//GEN-LAST:event_BtnBajarActionPerformed


    
    private void txtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreActionPerformed

    private void txtMarcaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMarcaActionPerformed
    }//GEN-LAST:event_txtMarcaActionPerformed

    private void txtVagonesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtVagonesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtVagonesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Trenes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Trenes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Trenes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Trenes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Trenes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnAgregar;
    private javax.swing.JButton BtnBajar;
    private javax.swing.JTable Tabla;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> txtMarca;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtVagones;
    // End of variables declaration//GEN-END:variables
}
